/* Generated By:JavaCC: Do not edit this line. MyNewGrammarConstants.java */
package compilers_project_1;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MyNewGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int _plus = 5;
  /** RegularExpression Id. */
  int _minus = 6;
  /** RegularExpression Id. */
  int _multiplication = 7;
  /** RegularExpression Id. */
  int _division = 8;
  /** RegularExpression Id. */
  int _mod = 9;
  /** RegularExpression Id. */
  int _assignop = 10;
  /** RegularExpression Id. */
  int _semicolon = 11;
  /** RegularExpression Id. */
  int _comma = 12;
  /** RegularExpression Id. */
  int _period = 13;
  /** RegularExpression Id. */
  int _leftparen = 14;
  /** RegularExpression Id. */
  int _rightparen = 15;
  /** RegularExpression Id. */
  int _leftbracket = 16;
  /** RegularExpression Id. */
  int _rightbracket = 17;
  /** RegularExpression Id. */
  int _leftbrace = 18;
  /** RegularExpression Id. */
  int _rightbrace = 19;
  /** RegularExpression Id. */
  int _less = 20;
  /** RegularExpression Id. */
  int _lessequal = 21;
  /** RegularExpression Id. */
  int _greater = 22;
  /** RegularExpression Id. */
  int _greaterequal = 23;
  /** RegularExpression Id. */
  int _equal = 24;
  /** RegularExpression Id. */
  int _notequal = 25;
  /** RegularExpression Id. */
  int _and = 26;
  /** RegularExpression Id. */
  int _or = 27;
  /** RegularExpression Id. */
  int _not = 28;
  /** RegularExpression Id. */
  int _boolean = 29;
  /** RegularExpression Id. */
  int _break = 30;
  /** RegularExpression Id. */
  int _class = 31;
  /** RegularExpression Id. */
  int _double = 32;
  /** RegularExpression Id. */
  int _else = 33;
  /** RegularExpression Id. */
  int _extends = 34;
  /** RegularExpression Id. */
  int _for = 35;
  /** RegularExpression Id. */
  int _if = 36;
  /** RegularExpression Id. */
  int _implements = 37;
  /** RegularExpression Id. */
  int _int = 38;
  /** RegularExpression Id. */
  int _interface = 39;
  /** RegularExpression Id. */
  int _new = 40;
  /** RegularExpression Id. */
  int _newarray = 41;
  /** RegularExpression Id. */
  int _null = 42;
  /** RegularExpression Id. */
  int _println = 43;
  /** RegularExpression Id. */
  int _readln = 44;
  /** RegularExpression Id. */
  int _return = 45;
  /** RegularExpression Id. */
  int _string = 46;
  /** RegularExpression Id. */
  int _void = 47;
  /** RegularExpression Id. */
  int _while = 48;
  /** RegularExpression Id. */
  int _id = 49;
  /** RegularExpression Id. */
  int _intconstant = 50;
  /** RegularExpression Id. */
  int _doubleconstant = 51;
  /** RegularExpression Id. */
  int _stringconstant = 52;
  /** RegularExpression Id. */
  int _booleanconstant = 53;
  /** RegularExpression Id. */
  int DIGIT = 54;
  /** RegularExpression Id. */
  int LETTER = 55;
  /** RegularExpression Id. */
  int ALPHABET = 56;
  /** RegularExpression Id. */
  int LINECOMMENT = 57;
  /** RegularExpression Id. */
  int MULTILINECOMMENT = 58;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"boolean\"",
    "\"break\"",
    "\"class\"",
    "\"double\"",
    "\"else\"",
    "\"extends\"",
    "\"for\"",
    "\"if\"",
    "\"implements\"",
    "\"int\"",
    "\"interface\"",
    "\"new\"",
    "\"newarray\"",
    "\"null\"",
    "\"println\"",
    "\"readln\"",
    "\"return\"",
    "\"string\"",
    "\"void\"",
    "\"while\"",
    "<_id>",
    "<_intconstant>",
    "<_doubleconstant>",
    "<_stringconstant>",
    "<_booleanconstant>",
    "<DIGIT>",
    "<LETTER>",
    "<ALPHABET>",
    "<LINECOMMENT>",
    "<MULTILINECOMMENT>",
  };

}
