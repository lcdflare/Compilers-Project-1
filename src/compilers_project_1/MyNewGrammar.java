/* Generated By:JavaCC: Do not edit this line. MyNewGrammar.java */
package compilers_project_1;

import java.util.List;
import java.util.ArrayList;
import java.io.FileNotFoundException;
import java.io.FileInputStream;

public class MyNewGrammar implements MyNewGrammarConstants {

  // trie 
  static int[] _switch = new int[51];
  static List<Character> _symbol = new ArrayList<Character>();
  static List<Integer> _next = new ArrayList<Integer>();

  public static void main( String args [] ) throws ParseException
  {
    MyNewGrammar parser = null;

    if ( args.length > 0 )
    {
      try
      {
              // We have a file to parse
              System.out.println( "file specified! Reading from file..." );
              parser = new MyNewGrammar( new FileInputStream( args[0] ) );
          }
          catch ( FileNotFoundException e )
          {
            System.out.println( "file not found! Terminating..." );
            return;
          }
    }
    else
    {
      System.out.println( "No file specified! Reading from standard input..." );
      parser = new MyNewGrammar( System.in );
    }

    while ( true )
    {
      try
      {
        parser.Start();
        System.out.println ( "MyNewGrammar: The input was read sucessfully." );
      }
      catch ( Exception e )
      {
        System.out.println( "NOK." );
        System.out.println( e.getMessage() );
        parser.ReInit( System.in );
      }
      catch ( Error e )
      {
        System.out.println( "Oops." );
        System.out.println( e.getMessage() );
        break;
      }
    }
  }

  final public void Start() throws ParseException {
  while ( jj_ntk == -1 )
  {
     Token token = getNextToken();
     System.out.println( token.image );
  }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _plus:
      case _minus:
      case _multiplication:
      case _division:
      case _mod:
      case _assignop:
      case _semicolon:
      case _comma:
      case _period:
      case _leftparen:
      case _rightparen:
      case _leftbracket:
      case _rightbracket:
      case _leftbrace:
      case _rightbrace:
      case _less:
      case _lessequal:
      case _greater:
      case _greaterequal:
      case _equal:
      case _notequal:
      case _and:
      case _or:
      case _not:
      case _boolean:
      case _break:
      case _class:
      case _double:
      case _else:
      case _extends:
      case _for:
      case _if:
      case _implements:
      case _int:
      case _interface:
      case _new:
      case _newarray:
      case _null:
      case _println:
      case _readln:
      case _return:
      case _string:
      case _void:
      case _while:
      case _id:
      case _intconstant:
      case _stringconstant:
      case _booleanconstant:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _plus:
        jj_consume_token(_plus);
        break;
      case _minus:
        jj_consume_token(_minus);
        break;
      case _multiplication:
        jj_consume_token(_multiplication);
        break;
      case _division:
        jj_consume_token(_division);
        break;
      case _mod:
        jj_consume_token(_mod);
        break;
      case _assignop:
        jj_consume_token(_assignop);
        break;
      case _semicolon:
        jj_consume_token(_semicolon);
        break;
      case _comma:
        jj_consume_token(_comma);
        break;
      case _period:
        jj_consume_token(_period);
        break;
      case _leftparen:
        jj_consume_token(_leftparen);
        break;
      case _rightparen:
        jj_consume_token(_rightparen);
        break;
      case _leftbracket:
        jj_consume_token(_leftbracket);
        break;
      case _rightbracket:
        jj_consume_token(_rightbracket);
        break;
      case _leftbrace:
        jj_consume_token(_leftbrace);
        break;
      case _rightbrace:
        jj_consume_token(_rightbrace);
        break;
      case _less:
        jj_consume_token(_less);
        break;
      case _lessequal:
        jj_consume_token(_lessequal);
        break;
      case _greater:
        jj_consume_token(_greater);
        break;
      case _greaterequal:
        jj_consume_token(_greaterequal);
        break;
      case _equal:
        jj_consume_token(_equal);
        break;
      case _notequal:
        jj_consume_token(_notequal);
        break;
      case _and:
        jj_consume_token(_and);
        break;
      case _or:
        jj_consume_token(_or);
        break;
      case _not:
        jj_consume_token(_not);
        break;
      case _boolean:
        jj_consume_token(_boolean);
        break;
      case _break:
        jj_consume_token(_break);
        break;
      case _class:
        jj_consume_token(_class);
        break;
      case _double:
        jj_consume_token(_double);
        break;
      case _else:
        jj_consume_token(_else);
        break;
      case _extends:
        jj_consume_token(_extends);
        break;
      case _for:
        jj_consume_token(_for);
        break;
      case _if:
        jj_consume_token(_if);
        break;
      case _implements:
        jj_consume_token(_implements);
        break;
      case _int:
        jj_consume_token(_int);
        break;
      case _interface:
        jj_consume_token(_interface);
        break;
      case _new:
        jj_consume_token(_new);
        break;
      case _newarray:
        jj_consume_token(_newarray);
        break;
      case _null:
        jj_consume_token(_null);
        break;
      case _println:
        jj_consume_token(_println);
        break;
      case _readln:
        jj_consume_token(_readln);
        break;
      case _return:
        jj_consume_token(_return);
        break;
      case _string:
        jj_consume_token(_string);
        break;
      case _void:
        jj_consume_token(_void);
        break;
      case _while:
        jj_consume_token(_while);
        break;
      case _id:
        jj_consume_token(_id);
        break;
      case _intconstant:
        jj_consume_token(_intconstant);
        break;
      case _stringconstant:
        jj_consume_token(_stringconstant);
        break;
      case _booleanconstant:
        jj_consume_token(_booleanconstant);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  /** Generated Token Manager. */
  public MyNewGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffffe0,0xffffffe0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x37ffff,0x37ffff,};
   }

  /** Constructor with InputStream. */
  public MyNewGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyNewGrammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MyNewGrammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MyNewGrammar(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[59];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 59; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
