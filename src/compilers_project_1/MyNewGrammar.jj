/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = false;}PARSER_BEGIN( MyNewGrammar )package compilers_project_1;

import java.util.List;
import java.util.ArrayList;
import java.io.FileNotFoundException;
import java.io.FileInputStream;

public class MyNewGrammar{
 
  // trie 
  static int[] _switch = new int[51];
  static List<Character> _symbol = new ArrayList<Character>();
  static List<Integer> _next = new ArrayList<Integer>();
  
  static String tokenName[] = new String[1000];
    public static void main( String args [] ) throws ParseException  {
  {
tokenName[0] = "EOF";
	tokenName[5] = "_plus"; tokenName[6] = "_minus"; tokenName[7] = "_multiplication";
	tokenName[8] = "_division"; tokenName[9] = "_mod"; tokenName[10] = "_assignop";
	tokenName[11] = "_semicolon"; tokenName[12] = "_comma"; tokenName[13] = "_period";
	tokenName[14] = "_leftparen"; tokenName[15] = "_rightparen"; tokenName[16] = "_leftbracket";
	tokenName[17] = "_rightbracket"; tokenName[18] = "_leftbrace"; tokenName[19] = "_rightbrace";
	tokenName[20] = "_less"; tokenName[21] = "_lessequal"; tokenName[22] = "_greater";
	tokenName[23] = "_greaterequal"; tokenName[24] = "_equal"; tokenName[25] = "_notequal";
	tokenName[26] = "_and"; tokenName[27] = "_or"; tokenName[28] = "_not";
	tokenName[29] = "_boolean"; tokenName[30] = "_break"; tokenName[31] = "_class";
	tokenName[32] = "_double"; tokenName[33] = "_else"; tokenName[34] = "_extends";
	tokenName[35] = "_for"; tokenName[36] = "_if"; tokenName[37] = "_implements";
	tokenName[38] = "_int"; tokenName[39] = "_interface"; tokenName[40] = "_new";
	tokenName[41] = "_newarray"; tokenName[42] = "_null"; tokenName[43] = "_println";
	tokenName[44] = "_readln"; tokenName[45] = "_return"; tokenName[46] = "_string";
	tokenName[47] = "_void"; tokenName[48] = "_while"; tokenName[49] = "_booleanconstant";
	tokenName[50] = "_id"; tokenName[51] = "_intconstant"; tokenName[52] = "_doubleconstant";
	tokenName[53] = "_stringconstant"; tokenName[54] = "DIGIT"; tokenName[55] = "LETTER";
	tokenName[56] = "ALPHABET"; tokenName[57] = "LINECOMMENT"; tokenName[58] = "MULTILINECOMMENT";

    MyNewGrammar parser = null;
    
    if ( args.length > 0 )
    {
      try
      { 
	      // We have a file to parse
	      System.out.println( "file specified! Reading from file..." );
	      parser = new MyNewGrammar( new FileInputStream( args[0] ) );
	  }
	  catch ( FileNotFoundException e )
	  {
	    System.out.println( "file not found! Terminating..." );
	    return;
	  }
    }
    else
    {
      System.out.println( "No file specified! Reading from standard input..." );
      parser = new MyNewGrammar( System.in );
    }
        while ( true )    {      try      {        parser.Start();
        System.out.println ( "MyNewGrammar: The input was read sucessfully." );      }      catch ( Exception e )      {        System.out.println( "NOK." );        System.out.println( e.getMessage() );        parser.ReInit( System.in );      }      catch ( Error e )      {        System.out.println( "Oops." );        System.out.println( e.getMessage() );        break;      }    }  }}PARSER_END( MyNewGrammar )SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* OPERATORS */{  < _plus : "+" >| < _minus : "-" >| < _multiplication : "*" >| < _division : "/" >
| < _mod : "%" >
| < _assignop : "=" >
| < _semicolon : ";" >
| < _comma : "," >
| < _period : "." >
| < _leftparen : "(" >
| < _rightparen : ")" >
| < _leftbracket : "[" >
| < _rightbracket : "]" >
| < _leftbrace : "{" >
| < _rightbrace : "}" >}

TOKEN : /* LOGICAL */
{
  < _less : "<" >
| < _lessequal : "<=" >
| < _greater : ">" >
| < _greaterequal : ">=" >
| < _equal : "==" >
| < _notequal : "!=" >
| < _and : "&&" >
| < _or : "||" >
| < _not : "!" >
}

TOKEN : /* RESERVED */
{
  < _boolean : "boolean" >
| < _break : "break" >
| < _class : "class" >
| < _double : "double" >
| < _else : "else" >
| < _extends : "extends" >
| < _for : "for" >
| < _if : "if" >
| < _implements : "implements" >
| < _int : "int" >
| < _interface : "interface" >
| < _new : "new" >
| < _newarray : "newarray" >
| < _null : "null" >
| < _println : "println" >
| < _readln : "readln" >
| < _return : "return" >
| < _string : "string" >
| < _void : "void" >
| < _while : "while" >
}TOKEN : /* BOOLEAN CONSTANT */
{
  < _booleanconstant : "true" | "false" >
}

TOKEN : /* IDENTIFIER */
{
  < _id : < LETTER >(< LETTER >|< DIGIT >|"_")* >
}

TOKEN : /* STATIC TOKENS */
{
  < _intconstant : (< DIGIT >)+ | ("0x" | "0X") (< DIGIT > |
  	"a" | "A" | "b" | "B" | "c" | "C" | "d" | "D" |
  	"e" | "E" | "f" | "F" )+ >
|   < _doubleconstant : (< DIGIT >)+ "." (< DIGIT >)* |
  	(< DIGIT >)+ "." (< DIGIT >)* ("E" | "e") ("+" | "-")? (< DIGIT >)+>
| < _stringconstant : "\"" (< ALPHABET >)+ "\"" >
| < #DIGIT : [ "0"-"9" ] >
| < #LETTER : [ "A"-"z" ] >
| < #ALPHABET : [" " - "~"] >
}

SKIP : /* COMMENTS */
{
  < LINECOMMENT : "//" ( ~["\r", "\n"] )* > // Line comments should skip the entire line
| < MULTILINECOMMENT : "/*" (< ALPHABET >)+ "*/" >
}
void Start() :{
  while ( jj_ntk == -1 )
  {
     Token token = getNextToken();
     System.out.println( token.toString() );
     System.out.println( tokenName[token.kind] );
  }
}{
  (
    < _plus > | < _minus > | < _multiplication > | < _division > |
    < _mod > | < _assignop > | < _semicolon > | < _comma > | < _period > |
    < _leftparen > | < _rightparen > | < _leftbracket > | < _rightbracket > |
    < _leftbrace > | < _rightbrace > | < _less > | < _lessequal > |
    < _greater > | < _greaterequal > | < _equal > | < _notequal > |
    < _and > | < _or > | < _not > | < _boolean > | < _break > | < _class > |
    < _double > | < _else > | < _extends > | < _for > | < _if > | < _implements > |
    < _int > | < _interface > | < _new > | < _newarray > | < _null > |
    < _println > | < _readln > | < _return > | < _string > | < _void > |
    < _while > | < _id > | < _intconstant > | < _stringconstant > |
    < _booleanconstant >
  )*
  //< EOF >}
