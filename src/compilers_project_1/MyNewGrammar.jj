/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */

/***********************************************************************************
* Collaborators: Prado, Arden & Francisco Rodriguez
* Project: 1
* Due: 10/04/2018
* Course: cs-4110-01
*
* Description:
* A simple lexical analyzer for a fictional object-oriented language named 'Toy.'
* The goal of this project is to scan any Toy-related programming files and translate
* the code into a sequence of tokens that can then be stored and modified using a
* symbol table of the data structure trie.
*
*
* Instructions for Running:
* The program can be compiled from command line or terminal using the command "javac *.java"
* This will compile all java files in the source. This step can also be skipped if using the 
* .class files provided. To run the program, type "java -cp [PATH] compilers_project_1.MyNewGrammar [FILENAME]"
* Where [PATH] specifies the install path to the compilers_project_1 package, and [FILENAME] specifies the file to be parsed.
* Included in the program are two test files: "toy.txt" and "toy2.txt" 
***********************************************************************************/
options{  static = false;}PARSER_BEGIN( MyNewGrammar )package compilers_project_1;

import java.io.FileNotFoundException;
import java.io.FileInputStream;

public class MyNewGrammar{
 
  // trie
  public Trie trie;
  
  static String tokenName[] = new String[1000];
    public static void main( String args [] ) throws ParseException
  {
tokenName[0] = "EOF"; tokenName[4] = "EOL";
	tokenName[5] = "_plus"; tokenName[6] = "_minus"; tokenName[7] = "_multiplication";
	tokenName[8] = "_division"; tokenName[9] = "_mod"; tokenName[10] = "_assignop";
	tokenName[11] = "_semicolon"; tokenName[12] = "_comma"; tokenName[13] = "_period";
	tokenName[14] = "_leftparen"; tokenName[15] = "_rightparen"; tokenName[16] = "_leftbracket";
	tokenName[17] = "_rightbracket"; tokenName[18] = "_leftbrace"; tokenName[19] = "_rightbrace";
	tokenName[20] = "_less"; tokenName[21] = "_lessequal"; tokenName[22] = "_greater";
	tokenName[23] = "_greaterequal"; tokenName[24] = "_equal"; tokenName[25] = "_notequal";
	tokenName[26] = "_and"; tokenName[27] = "_or"; tokenName[28] = "_not";
	tokenName[29] = "_boolean"; tokenName[30] = "_break"; tokenName[31] = "_class";
	tokenName[32] = "_double"; tokenName[33] = "_else"; tokenName[34] = "_extends";
	tokenName[35] = "_for"; tokenName[36] = "_if"; tokenName[37] = "_implements";
	tokenName[38] = "_int"; tokenName[39] = "_interface"; tokenName[40] = "_new";
	tokenName[41] = "_newarray"; tokenName[42] = "_null"; tokenName[43] = "_println";
	tokenName[44] = "_readln"; tokenName[45] = "_return"; tokenName[46] = "_string";
	tokenName[47] = "_void"; tokenName[48] = "_while"; tokenName[49] = "_booleanconstant";
	tokenName[50] = "_id"; tokenName[51] = "_intconstant"; tokenName[52] = "_doubleconstant";
	tokenName[53] = "_stringconstant"; tokenName[54] = "DIGIT"; tokenName[55] = "LETTER";
	tokenName[56] = "ALPHABET";

    MyNewGrammar parser = null;
    
    if ( args.length > 0 )
    {
  		try
  		{ 
      		// We have a file to parse
      		System.out.println( "file specified! Reading from file...\n" );
      		parser = new MyNewGrammar( new FileInputStream( args[0] ) );
  		}
  		catch ( FileNotFoundException e )
  		{
		    // Specified file doesn't exist so don't go any further
		    System.out.println( "file not found! Terminating..." );
		    return;
  		}
	}
	else
	{
  		// Default to console input
	  	System.out.println( "No file specified! Reading from standard input...\n" );
	  	parser = new MyNewGrammar( System.in );
	}
    	try	{
	    parser.trie = new Trie();	    parser.Start();  	}	catch ( Exception e )  	{	    System.out.println( "NOK." );	    System.out.println( e.getMessage() );	    parser.ReInit( System.in ); 	}  	catch ( Error e )  	{   		System.out.println( "Oops." );    	System.out.println( e.getMessage() );  	}  }}PARSER_END( MyNewGrammar )SKIP :{  " "| "\t"
| "\r"}

TOKEN : /* END OF LINE */
{
  < EOL : "\n" >
}TOKEN : /* OPERATORS */{  < _plus : "+" >| < _minus : "-" >| < _multiplication : "*" >| < _division : "/" >
| < _mod : "%" >
| < _assignop : "=" >
| < _semicolon : ";" >
| < _comma : "," >
| < _period : "." >
| < _leftparen : "(" >
| < _rightparen : ")" >
| < _leftbracket : "[" >
| < _rightbracket : "]" >
| < _leftbrace : "{" >
| < _rightbrace : "}" >}

TOKEN : /* LOGICAL */
{
  < _less : "<" >
| < _lessequal : "<=" >
| < _greater : ">" >
| < _greaterequal : ">=" >
| < _equal : "==" >
| < _notequal : "!=" >
| < _and : "&&" >
| < _or : "||" >
| < _not : "!" >
}

TOKEN : /* RESERVED */
{
  < _boolean : "boolean" >
| < _break : "break" >
| < _class : "class" >
| < _double : "double" >
| < _else : "else" >
| < _extends : "extends" >
| < _for : "for" >
| < _if : "if" >
| < _implements : "implements" >
| < _int : "int" >
| < _interface : "interface" >
| < _new : "new" >
| < _newarray : "newarray" >
| < _null : "null" >
| < _println : "println" >
| < _readln : "readln" >
| < _return : "return" >
| < _string : "string" >
| < _void : "void" >
| < _while : "while" >
}TOKEN : /* BOOLEAN CONSTANT */
{
  < _booleanconstant : "true" | "false" >
}

TOKEN : /* IDENTIFIER */
{
  < _id : < LETTER >(< LETTER >|< DIGIT >|"_")* >
}

TOKEN : /* STATIC TOKENS */
{
  < _intconstant : (< DIGIT >)+ | ("0x" | "0X") (< DIGIT > |
  	"a" | "A" | "b" | "B" | "c" | "C" | "d" | "D" |
  	"e" | "E" | "f" | "F" )+ | (< DIGIT >)+ ( "E" | "e" ) "+" (< DIGIT >)+>
|   < _doubleconstant : (< DIGIT >)+ "." (< DIGIT >)* |
  	(< DIGIT >)+ "." (< DIGIT >)* ("E" | "e") ("+" | "-")? (< DIGIT >)+>
| < _stringconstant : "\"" ( ~["\r", "\n", "\""] )* "\"" >
| < #DIGIT : ["0"-"9"] >
| < #LETTER : ["a"-"z", "A"-"Z"] >
| < #ALPHABET : [" " - "~"] >
}

SKIP : /* COMMENTS */
{
  < LINECOMMENT : "//" ( ~["\r", "\n"] )* > // Line comments should skip the entire line
| < ML_COMMENT_START : "/*" > : IN_ML_COMMENT
}

< IN_ML_COMMENT > SKIP :
{
  < ML_COMMENT_END : "*/" > : DEFAULT
| < ~[] >
}
void Start() :{
	while ( jj_ntk == -1 )
  	{
 		// Get the next token
 		Token token = getNextToken();
 		//System.out.print( token.toString() + " " );

	 	if ( tokenName[token.kind].equals( "EOF" ) )
	 	{
		   	// End of File. Terminate
		   	break;
	 	}	
	 	else if ( tokenName[token.kind].equals( "EOL" ) )
	 	{
		   	// New line 
		   	System.out.print( "\n" );
	 	}
	 	else
	 	{
	 	  	// Print the type of token we're parsing
		 	System.out.print( tokenName[token.kind] + " " );

			// Is this an identifier?
		 	if ( tokenName[token.kind].equals( "_id" ) )
		 	{
		 	  	// Add if to the symbol table
			 	trie.addIdentifier( token.toString() );
		 	}
	 	}
		 
	}

	// Print the symbol table
	System.out.print( "\n\nPrinting trie...\n\n " );
  	trie.display();
}{
  (
    < _plus > | < _minus > | < _multiplication > | < _division > |
    < _mod > | < _assignop > | < _semicolon > | < _comma > | < _period > |
    < _leftparen > | < _rightparen > | < _leftbracket > | < _rightbracket > |
    < _leftbrace > | < _rightbrace > | < _less > | < _lessequal > |
    < _greater > | < _greaterequal > | < _equal > | < _notequal > |
    < _and > | < _or > | < _not > | < _boolean > | < _break > | < _class > |
    < _double > | < _else > | < _extends > | < _for > | < _if > | < _implements > |
    < _int > | < _interface > | < _new > | < _newarray > | < _null > |
    < _println > | < _readln > | < _return > | < _string > | < _void > |
    < _while > | < _id > | < _intconstant > | < _stringconstant > |
    < _booleanconstant >
  )*
  < EOF >}